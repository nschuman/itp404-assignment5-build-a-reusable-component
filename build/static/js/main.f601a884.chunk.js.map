{"version":3,"sources":["IsUserNameValid.js","App.js","serviceWorker.js","index.js"],"names":["IsUserNameValid","props","text","array","length","lengthText","lengthTextColor","originalText","originalTextColor","i","style","color","App","handleChange","event","console","log","setState","userName","target","value","state","takenUserNames","nameMinLength","this","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+NAGe,SAASA,EAAgBC,GAMvC,IAN+C,IACxCC,EAAqBD,EAArBC,KAAMC,EAAeF,EAAfE,MAAOC,EAAQH,EAARG,OAChBC,EAAW,GACXC,EAAgB,GAChBC,EAAa,GACbC,EAAkB,GACdC,EAAE,EAAGA,EAAEN,EAAMC,OAAQK,IAAI,CAC1B,GAAGP,GAAMC,EAAMM,IAAU,IAANP,EAAS,CAC3BK,EAAa,mCACbC,EAAkB,MAClB,MAGAD,EAAa,wBACbC,EAAkB,QAW1B,OARGN,EAAKE,QAAQA,GACXC,EAAW,uBACXC,EAAgB,UAGpBD,EAAW,8CAA8CD,EAAO,cAChEE,EAAgB,OAGZ,6BACA,yBAAKI,MAAO,CAACC,MAAMH,IAAqBD,GACxC,yBAAKG,MAAO,CAACC,MAAML,IAAmBD,I,UC3BvBO,E,YACnB,WAAYX,GAAO,IAAD,8BAChB,4CAAMA,KAORY,aAAe,SAACC,GACdC,QAAQC,IAAI,aACZ,EAAKC,SAAS,CACZC,SAAUJ,EAAMK,OAAOC,SATzB,EAAKC,MAAM,CACTH,SAAS,GACTI,eAAe,CAAC,eAAe,cAAc,aAC7CC,cAAc,GALA,E,sEAehB,OACE,6BACA,wFACA,2BAAOH,MAAOI,KAAKH,MAAMH,SAAUO,SAAUD,KAAKX,eAClD,kBAACb,EAAD,CAAiBE,KAAMsB,KAAKH,MAAMH,SAAUf,MAAOqB,KAAKH,MAAMC,eAAgBlB,OAAQoB,KAAKH,MAAME,gBACjG,stB,GArB2BG,IAAMC,WCQnBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,gB","file":"static/js/main.f601a884.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function IsUserNameValid(props) {\r\n\tconst {text, array, length}=props;\r\n\tlet lengthText=\"\";\r\n\tlet lengthTextColor=\"\";\r\n\tlet originalText=\"\";\r\n\tlet originalTextColor=\"\";\r\n\tfor(var i=0; i<array.length; i++){\r\n        if(text==array[i]||text==''){\r\n        \toriginalText=\"Please enter an orginal username\";\r\n        \toriginalTextColor=\"red\";\r\n        \tbreak;\r\n        }\r\n        else{\r\n        \toriginalText=\"Username is original.\";\r\n        \toriginalTextColor=\"green\";\r\n        }\r\n\t}\r\n\tif(text.length>=length){\r\n      lengthText=\"Username long enough\";\r\n      lengthTextColor=\"green\";\r\n\t}\r\n\telse{\r\n\t\tlengthText=\"Please make sure your username is at least \"+length+\" characters\";\r\n\t\tlengthTextColor=\"red\";\r\n\t}\r\n\treturn(\r\n      <div>\r\n      <div style={{color:originalTextColor}}>{originalText}</div>\r\n      <div style={{color:lengthTextColor}}>{lengthText}</div>\r\n      </div>\r\n\t\t);\r\n}\r\nIsUserNameValid.propTypes={\r\n\ttext: PropTypes.string.isRequired,\r\n\tarray: PropTypes.array.isRequired,\r\n\tlength: PropTypes.number.isRequired\r\n}","import React from 'react';\nimport IsUserNameValid from './IsUserNameValid'\nimport './App.css';\n\nexport default class App extends React.Component {\n  constructor(props){\n    super(props);\n    this.state={\n      userName:'',\n      takenUserNames:['tommytrojan1','itpstudent2','nschuman3'],\n      nameMinLength:5,\n    };\n  }\n  handleChange = (event) =>{\n    console.log(\"It worked\");\n    this.setState({\n      userName: event.target.value\n    });\n  }\n  render(){\n    return(\n      <div>\n      <p>Please enter a username according to the guidelines below</p>\n      <input value={this.state.userName} onChange={this.handleChange}/> \n      <IsUserNameValid text={this.state.userName} array={this.state.takenUserNames} length={this.state.nameMinLength}/>\n      <p>I believe that this component will be useful for developers making a site that requires users to register a username. My motivations for making this component come from my experince with my final project for itp 303. I had to make a site involving registration, and I found it cumbersome to make it without react. Developers can use this component on essentially any site involving username registration. I decided to give the props generic names like text, array, and length to ensure that this component has reusability for different fields. In terms of the name IsUserNameValid, I feel that this is a descriptive enough title to help developers understand what exactly my component does.</p> \n      </div>\n      );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}